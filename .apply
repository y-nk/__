source ./.colors

if [[ -z "${__}" ]]; then
  export __="$(pwd)"
fi


function log_cmd() {
  _info "$1..." "  "
  eval $4 >> /dev/null 2>&1
  val=$?
  _cr
  if [[ "$val" == "0" ]]; then
    _success "$2!" "  "
  else
    _fail "$3" "  "
  fi
  _nl
}

function section() {
  _title $1 && _nl
}

function apply_stuff() {
  log_cmd "applying $1" "$1 applied" "$1 failed" "$2"
}

function install_stuff() {
  log_cmd "installing $1" "$1 installed" "$1 install failed" "$2"
}

function update_stuff() {
  log_cmd "updating $1" "$1 updated" "$1 update failed" "$2"
}

function apply_files() {
  section "files"

  files=(.secrets)

  for file in "${files[@]}"; do
    apply_stuff $file 'touch "${HOME}/${file}"'
  done
}

function apply_symlinks() {
  section "symlinks"
Â 
  links=(.aliases .apply .bash_profile .bashrc .colors .editorconfig .fdignore .gitcommit .gitconfig .y_nk.gitconfig .pro.gitconfig .gitignore .mackup.cfg .macos .shellrc .shortcuts.plist .zshrc)

  for link in "${links[@]}"; do
    apply_stuff $link 'ln -fs "${__}/${link}" "${HOME}/${link}"'
  done
}

function apply_secrets() {
  section "secrets"

  secrets=(gnupg ssh)

  for secret in "${secrets[@]}"; do
    apply_stuff $secret 'rm -fr "${HOME}/.${secret}" && ln -fs "${__}/../${secret}" "${HOME}/.${secret}"'
  done
}

function apply_xcode() {
  section "xcode"
  install_stuff "xcode" "sudo xcode-select --install"
}

function apply_omz() {
  section "omz"

  if [ ! -d "$HOME/.oh-my-zsh" ]; then
    install_stuff "omz" '/bin/bash -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"'
  else
    update_stuff "omz" "omz update"
  fi
}

function apply_brew() {
  section "brew"

  if ! type "brew" > /dev/null; then
    install_stuff "brew" '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
  else
    update_stuff "brew" "brew update"
  fi
}

function apply_cli_apps() {
  section "cli apps"

  packages=(asciinema awscli bash bat chafa coreutils curl fd fortune fzf gh git git-delta glow
httpie jq kubectl m-cli mackup macos-trash mas mise ncdu nmap pnpm
sdm telnet watch rodionovd/taps/shortcuts superfly/tap/flyctl)

  for package in "${packages[@]}"; do
    install_stuff "$package" "brew install $package"
  done
}

function apply_cask_apps() {
  section "cask apps"

  casks=(1password 1password-cli android-platform-tools arc bambu-studio blender
 fork gpg-suite-no-mail gitify iterm2 licecap maestral notion ngrok notion-calendar orbstack rectangle sdm shottr slack tableplus todoist unnaturalscrollwheels visual-studio-code vyprvpn homebrew/cask-fonts/font-anonymous-pro
homebrew/cask-fonts/font-martian-mono)

  for cask in "${casks[@]}"; do
    install_stuff "$cask" "brew install --cask $cask"
  done
}

function apply_macstore_apps() {
  section "macstore apps"

  apps=( hiddenbar-1452453066 line-539883307 screenbrush-1233965871 tasktab-1395414535 )

  for app in "${apps[@]}"; do
    install_stuff "${app%%-*}" "mas install ${app#*-}"
  done
}

function apply_iterm_components() {
  section "iterm"

  install_path="${HOME}/Library/Application Support/iTerm2"
  scripts_path="${install_path}/Scripts/AutoLaunch"

  rm -fr $scripts_path >> /dev/null
  mkdir -p $scripts_path >> /dev/null

  scripts=$(cd ${__}/.iterm && ls *.py)

  for script in "${scripts[@]}"; do
    echo ln -fs "${__}/.iterm/${script}" "${scripts_path}/${script}"
    apply_stuff "script: $script" 'ln -fs "${__}/.iterm/${script}" "${scripts_path}/${script}"'
  done
}

function apply_postinstall() {
  section "postinstall"

  apply_stuff "fzf" "$(brew --prefix)/opt/fzf/install --all"
  apply_stuff "mackup" "mackup restore"
  apply_stuff "shortcuts" "shortcuts import ~/.shortcuts.plist"
}

function apply_macos() {
  section "macOS"

  apply_stuff "macOS settings" "source ./.macos"
}

function apply_all() {
  apply_files
  apply_symlinks
  apply_secrets
  apply_omz
  apply_brew
  apply_cli_apps
  apply_cask_apps
  apply_macstore_apps
  apply_postinstall
  #apply_macos
}
