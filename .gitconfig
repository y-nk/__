[core]
  attributesfile = ~/.gitattributes
  editor = /usr/bin/nano
  excludesfile = ~/.gitignore
  hooksPath = /dev/null # https://stackoverflow.com/a/67527118
  trustctime = false # http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
  untrackedCache = true # https://git-scm.com/docs/git-update-index#_untracked_cache
  whitespace = space-before-tab,-trailing-space

[include]
  path = ~/.y_nk.gitconfig

[includeIf "gitdir:~/Work/"]
  path = ~/.pro.gitconfig

# ---------------------------------------

[alias]
  # basic ops
  bra = !"f() { git switch --create \"julien/$1\"; }; f"
  clo = clone
  cm  = commit
  co  = checkout
  rc  = rebase --continue
  pushd = push -u origin HEAD
  st  = status -s -u
  sth = stash
  sync = !git pull --quiet && git push
  # pretty logs
  ls = !git log --pretty=format:\"%C(cyan)%h%Creset -%C(red)%d%Creset %s - %C(yellow)[%an]%C(dim yellow) (%cr)\" --abbrev-commit
  graph = log --pretty='tformat: %s' --graph --all --find-renames
  track = branch --set-upstream-to
  yesterday = log --since=yesterday.midnight
  # workflow
  test = !"f() { echo $@; }; f"

  cobra = !"f() { git fetch origin $(git main) --quiet; git switch --create \"julien/$1\" origin/$(git main) --quiet; }; f"
  empty = !git cm --allow-empty -m \"empty\" && git push
  feat = !"f() { git cm -m \"feat: $@\";}; f"
  fix = !"f() { git cm -m \"fix: $@\";}; f"
  it = !"f() { git add . && git cm -m \"$@\" && git push; }; f"
  main = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
  whoami = config user.email
  wip = !"f() { git add .; git cm -m \"wip: $(curl --silent http://metaphorpsum.com/sentences/1)\"; git push; }; f"
  # history related ops
  amend = commit --amend --no-edit
  cancel = reset HEAD~1 --hard
  clear = reset --hard
  drop = !"f() { sha=$(git rev-parse \"$1\"); git rebase --onto \"$sha^\" \"$sha\"; }; f"
  fixup = !"f() { git commit --fixup \"$1\" && git rebase --autosquash HEAD~10; }; f"
  pop = !"f() { sha=$(git rev-parse \"$1\"); git rebase --onto \"$sha^\" \"$sha\"; git cherry-pick \"$sha\"; }; f"
  reword = commit --amend
  stack = !git add . && git amend
  undo = reset HEAD~1 --mixed
  up = !"f() { git pull --rebase --autostash origin $(git main) \"$@\";}; f"
  rw = !"git add . && git cm --amend --no-edit && git push -f"

[color]
  branch = auto
  diff = auto
  interactive = auto
  status = auto
  ui = auto

[delta]
  navigate = true

[difftool "vscode"]
  cmd = code --wait --diff $LOCAL $REMOTE

[interactive]
  diffFilter = delta --color-only

[mergetool]
  keepBackup = false
  keepTemporaries = false
  writeToTemp = true
  prompt = false

[versionsort]
  prereleaseSuffix = -pre
  prereleaseSuffix = .pre
  prereleaseSuffix = -beta
  prereleaseSuffix = .beta
  prereleaseSuffix = -rc
  prereleaseSuffix = .rc

# ---------------------------------------

[init]
  defaultBranch = main

[branch]
  autosetupmerge = simple
  autosetuprebase = always
  sort = -committerdate

[commit]
  gpgSign = true
  template = ~/.gitcommit

[diff]
  colorMoved = default
  mnemonicPrefix = true
  renames = true
  submodule = log
  tool = vscode
  wordRegex = .

[gpg]
  program = gpg
  format = ssh

[help]
  autocorrect = 1

[log]
  abbrevCommit = true

[fetch]
  recurseSubmodules = on-demand
  prune = true

[grep]
  break = true
  extendedRegexp = true
  heading = true
  lineNumber = true

[merge]
  conflictstyle = diff3
  ff = false

[pull]
  rebase = merges

[push]
  autoSetupRemote = true
  default = simple
  followTags = true

[rebase]
  autoSquash = true
  autoStash = true

[status]
  submoduleSummary = true
  showUntrackedFiles = all

[tag]
  sort = version:refname

[user]
  signingkey = /Users/julien/.ssh/id_rsa
